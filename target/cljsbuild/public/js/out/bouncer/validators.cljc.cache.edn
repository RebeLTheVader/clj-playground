;; Analyzed by ClojureScript 1.7.228
{:use-macros {defvalidator bouncer.validators}, :excludes #{boolean}, :name bouncer.validators, :imports nil, :requires {f cljs-time.format, cljs-time.format cljs-time.format}, :uses nil, :defs {max-count {:name bouncer.validators/max-count, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 187, :column 1, :end-line 187, :end-column 24, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 187, :column 15, :end-line 187, :end-column 24}}, every {:name bouncer.validators/every, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 146, :column 1, :end-line 146, :end-column 20, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 146, :column 15, :end-line 146, :end-column 20}}, boolean {:name bouncer.validators/boolean, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 96, :column 1, :end-line 96, :end-column 22, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 96, :column 15, :end-line 96, :end-column 22}}, required {:name bouncer.validators/required, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 66, :column 1, :end-line 66, :end-column 23, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 66, :column 15, :end-line 66, :end-column 23}}, defvalidator {:protocol-inline nil, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 14, :column 11, :end-line 14, :end-column 23, :macro true, :arglists (quote ([name docstring? opts-map? [args*] & body])), :doc "Defines a new validating function using args & body semantics as provided by \"defn\".\n  docstring and opts-map are optional\n\n  opts-map is a map of key-value pairs and may be one of:\n\n  - `:default-message-format` used when the client of this validator doesn't\n  provide a message (consider using custom message functions)\n\n  - `:optional` whether the validation should be run only if the given key has\n  a non-nil value in the map. Defaults to true.\n\n  or any other key-value pair which will be available in the validation result\n  under the `:metadata` key.\n\n  The function will be called with the value being validated as its first argument.\n\n  Any extra arguments will be passed along to the function in the order they were used in the\n  \"validate\" call.\n\n  e.g.:\n\n\n    (defvalidator member\n      [value coll]\n      (some #{value} coll))\n\n    (validate {:age 10}\n      :age [[member (range 5)]])\n\n\n  This means the validator `member` will be called with the arguments `10` and `(0 1 2 3 4)`,\n  in that order.\n", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name options)], :arglists ([&form &env name & options]), :arglists-meta (nil)}}, :name bouncer.validators/defvalidator, :variadic true, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name options)], :arglists ([&form &env name & options]), :arglists-meta (nil)}, :method-params [(&form &env name options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :macro true, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & options]), :doc "Defines a new validating function using args & body semantics as provided by \"defn\".\n  docstring and opts-map are optional\n\n  opts-map is a map of key-value pairs and may be one of:\n\n  - `:default-message-format` used when the client of this validator doesn't\n  provide a message (consider using custom message functions)\n\n  - `:optional` whether the validation should be run only if the given key has\n  a non-nil value in the map. Defaults to true.\n\n  or any other key-value pair which will be available in the validation result\n  under the `:metadata` key.\n\n  The function will be called with the value being validated as its first argument.\n\n  Any extra arguments will be passed along to the function in the order they were used in the\n  \"validate\" call.\n\n  e.g.:\n\n\n    (defvalidator member\n      [value coll]\n      (some #{value} coll))\n\n    (validate {:age 10}\n      :age [[member (range 5)]])\n\n\n  This means the validator `member` will be called with the arguments `10` and `(0 1 2 3 4)`,\n  in that order.\n"}, email {:name bouncer.validators/email, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 162, :column 1, :end-line 162, :end-column 20, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 162, :column 15, :end-line 162, :end-column 20}}, number {:name bouncer.validators/number, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 80, :column 1, :end-line 80, :end-column 21, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 80, :column 15, :end-line 80, :end-column 21}}, positive {:name bouncer.validators/positive, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 121, :column 1, :end-line 121, :end-column 23, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 121, :column 15, :end-line 121, :end-column 23}}, custom {:name bouncer.validators/custom, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 138, :column 1, :end-line 138, :end-column 21, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 138, :column 15, :end-line 138, :end-column 21}}, matches {:name bouncer.validators/matches, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 154, :column 1, :end-line 154, :end-column 22, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 154, :column 15, :end-line 154, :end-column 22}}, string {:name bouncer.validators/string, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 105, :column 1, :end-line 105, :end-column 21, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 105, :column 15, :end-line 105, :end-column 21}}, member {:name bouncer.validators/member, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 130, :column 1, :end-line 130, :end-column 21, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 130, :column 15, :end-line 130, :end-column 21}}, in-range {:name bouncer.validators/in-range, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 113, :column 1, :end-line 113, :end-column 23, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 113, :column 15, :end-line 113, :end-column 23}}, integer {:name bouncer.validators/integer, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 88, :column 1, :end-line 88, :end-column 22, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 88, :column 15, :end-line 88, :end-column 22}}, min-count {:name bouncer.validators/min-count, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 195, :column 1, :end-line 195, :end-column 24, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 195, :column 15, :end-line 195, :end-column 24}}, datetime {:name bouncer.validators/datetime, :file "target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 173, :column 1, :end-line 173, :end-column 23, :meta {:file "/home/rebel/developer/megasite/target/cljsbuild/public/js/out/bouncer/validators.cljc", :line 173, :column 15, :end-line 173, :end-column 23}}}, :require-macros {bouncer.validators bouncer.validators}, :cljs.analyzer/constants {:seen #{:bouncer.validators/max-count :bouncer.validators/number :else :validator :bouncer.validators/matches :bouncer.validators/string :bouncer.validators/member :bouncer.validators/in-range do :bouncer.validators/email :bouncer.validators/custom cljs.core/with-meta :bouncer.validators/datetime name :bouncer.validators/min-count :optional :bouncer.validators/positive cljs.core/fn :bouncer.validators/integer :bouncer.validators/required quote :bouncer.validators/boolean :default-message-format :bouncer.validators/every def}, :order [:optional :validator quote name do def cljs.core/with-meta cljs.core/fn :default-message-format :bouncer.validators/required :bouncer.validators/number :bouncer.validators/integer :bouncer.validators/boolean :bouncer.validators/string :bouncer.validators/in-range :bouncer.validators/positive :bouncer.validators/member :bouncer.validators/custom :bouncer.validators/every :bouncer.validators/matches :bouncer.validators/email :else :bouncer.validators/datetime :bouncer.validators/max-count :bouncer.validators/min-count]}, :doc "This namespace contains all built-in validators as well as\n          macros for defining new validators and validator sets"}